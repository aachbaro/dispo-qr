// src/composables/useFactures.ts
// -------------------------------------------------------------
// Composable de gestion des factures
// -------------------------------------------------------------
//
// üìå Description :
//   - Centralise les appels aux services (src/services/factures.ts)
//   - Fournit un √©tat r√©actif (factures, loading, error)
//   - Expose des actions CRUD (fetch, create, update, remove)
//   - Utilis√© dans les composants : FactureList, FactureModal, etc.
//
// üîí R√®gles d‚Äôacc√®s :
//   - L‚Äôacc√®s aux factures est contr√¥l√© c√¥t√© API (owner vs public)
//   - Le composable ne fait que relayer les erreurs
//
// ‚ö†Ô∏è Remarques :
//   - Les erreurs sont stock√©es dans `error` et logg√©es en console
//   - Apr√®s suppression, la facture est retir√©e du state local
// -------------------------------------------------------------

import { ref } from "vue";
import {
  listEntrepriseFactures,
  createEntrepriseFacture,
  updateEntrepriseFacture,
  deleteEntrepriseFacture,
  type Facture,
  type FacturePayload,
  type FactureUpdate,
} from "../services/factures";

// ----------------------
// Composable
// ----------------------
export function useFactures() {
  const factures = ref<Facture[]>([]);
  const loading = ref(false);
  const error = ref<string | null>(null);

  /**
   * üìú R√©cup√®re la liste des factures d‚Äôune entreprise
   */
  async function fetchFactures(refEntreprise: string | number) {
    loading.value = true;
    error.value = null;
    try {
      const { factures: data } = await listEntrepriseFactures(refEntreprise);
      factures.value = data;
    } catch (err: any) {
      console.error("‚ùå Erreur fetch factures:", err);
      error.value = err.message || "Impossible de r√©cup√©rer les factures";
    } finally {
      loading.value = false;
    }
  }

  /**
   * ‚ûï Cr√©e une nouvelle facture
   */
  async function createFacture(
    refEntreprise: string | number,
    payload: FacturePayload
  ) {
    loading.value = true;
    error.value = null;
    try {
      const { facture } = await createEntrepriseFacture(refEntreprise, payload);
      factures.value.unshift(facture); // ajoute en t√™te de liste
      return facture;
    } catch (err: any) {
      console.error("‚ùå Erreur cr√©ation facture:", err);
      error.value = err.message || "Impossible de cr√©er la facture";
      throw err;
    } finally {
      loading.value = false;
    }
  }

  /**
   * ‚úèÔ∏è Met √† jour une facture existante
   */
  async function updateFacture(
    refEntreprise: string | number,
    factureId: number,
    updates: FactureUpdate
  ) {
    loading.value = true;
    error.value = null;
    try {
      const { facture } = await updateEntrepriseFacture(
        refEntreprise,
        factureId,
        updates
      );
      const idx = factures.value.findIndex((f) => f.id === facture.id);
      if (idx !== -1) factures.value[idx] = facture;
      return facture;
    } catch (err: any) {
      console.error("‚ùå Erreur update facture:", err);
      error.value = err.message || "Impossible de mettre √† jour la facture";
      throw err;
    } finally {
      loading.value = false;
    }
  }

  /**
   * ‚ùå Supprime une facture
   */
  async function removeFacture(
    refEntreprise: string | number,
    factureId: number
  ) {
    loading.value = true;
    error.value = null;
    try {
      await deleteEntrepriseFacture(refEntreprise, factureId);
      factures.value = factures.value.filter((f) => f.id !== factureId);
    } catch (err: any) {
      console.error("‚ùå Erreur suppression facture:", err);
      error.value = err.message || "Impossible de supprimer la facture";
      throw err;
    } finally {
      loading.value = false;
    }
  }

  return {
    factures,
    loading,
    error,
    fetchFactures,
    createFacture,
    updateFacture,
    removeFacture,
  };
}
