// src/composables/useAdmin.ts
// -------------------------------------------------------------
// Composable de gestion du mode admin
// -------------------------------------------------------------
//
// üìå Description :
//   - Expose un √©tat r√©actif `isAdmin` bas√© sur la pr√©sence d‚Äôun token
//   - Permet d‚Äôactiver/d√©sactiver le mode admin avec `setAdmin`
//   - Synchro automatique entre onglets via `storage`
//
// üîí R√®gles d‚Äôacc√®s :
//   - Admin = pr√©sence d‚Äôun "adminToken" dans localStorage
//   - Ce composable ne g√®re pas la validation r√©elle du token (fait c√¥t√© API)
//
// ‚ö†Ô∏è Remarques :
//   - Si `setAdmin(false)` ‚Üí suppression du token (logout admin)
//   - √Ä utiliser dans les vues prot√©g√©es pour v√©rifier l‚Äôacc√®s
//
// -------------------------------------------------------------

import { ref } from "vue";

// ----------------------
// State global
// ----------------------

const isAdmin = ref<boolean>(false);

// Init depuis localStorage + synchro inter-onglets
if (typeof window !== "undefined") {
  isAdmin.value = !!localStorage.getItem("adminToken");

  window.addEventListener("storage", (e) => {
    if (e.key === "adminToken") {
      isAdmin.value = !!localStorage.getItem("adminToken");
    }
  });
}

// ----------------------
// Actions
// ----------------------

/**
 * ‚úÖ D√©finit le statut admin
 * @param val - true pour activer, false pour d√©sactiver
 */
function setAdmin(val: boolean) {
  isAdmin.value = val;

  if (!val && typeof window !== "undefined") {
    // logout ‚Üí suppression du token
    localStorage.removeItem("adminToken");
  }
}

// ----------------------
// Export composable
// ----------------------

export default function useAdmin() {
  return { isAdmin, setAdmin };
}

export { isAdmin, setAdmin };
