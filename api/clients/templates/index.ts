// api/clients/templates/index.ts
// -------------------------------------------------------------
// Gestion des modÃ¨les de mission dâ€™un client (via auth uniquement)
// -------------------------------------------------------------
//
// ğŸ“Œ Description :
//   - GET  â†’ Liste les templates du client connectÃ©
//   - POST â†’ CrÃ©e un nouveau template pour le client connectÃ©
//
// ğŸ”’ RÃ¨gles dâ€™accÃ¨s :
//   - Seul le client authentifiÃ© peut gÃ©rer ses templates
//   - Lâ€™ID client est pris depuis le token (pas lâ€™URL)
// -------------------------------------------------------------

import type { VercelRequest, VercelResponse } from "@vercel/node";
import { supabaseAdmin } from "../../_supabase.js";
import { getUserFromToken } from "../../utils/auth.js";

export default async function handler(req: VercelRequest, res: VercelResponse) {
  const user = await getUserFromToken(req);
  if (!user) return res.status(401).json({ error: "Non authentifiÃ©" });
  if (user.user_metadata?.role !== "client") {
    return res.status(403).json({ error: "AccÃ¨s interdit" });
  }

  if (req.method === "GET") {
    // ğŸ“‹ Liste des templates du client
    const { data, error } = await supabaseAdmin
      .from("mission_templates")
      .select("*")
      .eq("client_id", user.id)
      .order("created_at", { ascending: false });

    if (error) return res.status(500).json({ error: error.message });
    return res.status(200).json({ templates: data });
  }

  if (req.method === "POST") {
    const payload = req.body;
    if (!payload?.nom || !payload?.etablissement) {
      return res.status(400).json({ error: "Champs requis manquants" });
    }

    const { data, error } = await supabaseAdmin
      .from("mission_templates")
      .insert([{ ...payload, client_id: user.id }])
      .select()
      .single();

    if (error) return res.status(500).json({ error: error.message });
    return res.status(201).json({ template: data });
  }

  return res.status(405).json({ error: "MÃ©thode non autorisÃ©e" });
}
