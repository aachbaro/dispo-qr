// api/stripe/webhook.ts
// -------------------------------------------------------------
// Webhook Stripe - Suivi des paiements
// -------------------------------------------------------------
//
// URL (dev) : http://localhost:3000/api/stripe/webhook
//
// Fonctionnement :
// - D√©sactive bodyParser (Stripe exige le raw body pour v√©rifier la signature)
// - V√©rifie la signature Stripe via STRIPE_WEBHOOK_SECRET
// - G√®re les √©v√©nements principaux :
//    ‚Ä¢ checkout.session.completed ‚Üí facture marqu√©e comme "pay√©e"
//    ‚Ä¢ payment_intent.payment_failed ‚Üí facture marqu√©e comme "annul√©e"
// - Met √† jour la table `factures` dans Supabase
//
// Bonnes pratiques :
// - Toujours logguer l‚Äôevent type re√ßu
// - Ne jamais r√©pondre 200 si traitement √©choue
// - Conserver des logs clairs en cas de probl√®me
//
// -------------------------------------------------------------

import type { VercelRequest, VercelResponse } from "@vercel/node";
import Stripe from "stripe";
import { supabaseAdmin } from "../_supabase.js";

// -----------------------------
// Initialisation Stripe
// -----------------------------
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string);

// Stripe requiert l'acc√®s au body brut
export const config = {
  api: {
    bodyParser: false,
  },
};

// -----------------------------
// Helpers
// -----------------------------
/**
 * R√©cup√®re le corps brut de la requ√™te (sans parsing JSON).
 */
function rawBody(req: VercelRequest): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    const chunks: Uint8Array[] = [];
    req.on("data", (chunk) => chunks.push(chunk));
    req.on("end", () => resolve(Buffer.concat(chunks)));
    req.on("error", (err) => reject(err));
  });
}

// -----------------------------
// Handler principal
// -----------------------------
export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (req.method !== "POST") {
    return res.status(405).send("M√©thode non autoris√©e");
  }

  const sig = req.headers["stripe-signature"];
  if (!sig) {
    return res.status(400).send("Signature manquante");
  }

  let event: Stripe.Event;
  try {
    const buf = await rawBody(req); // ‚ö° R√©cup√®re le body brut
    event = stripe.webhooks.constructEvent(
      buf,
      sig,
      process.env.STRIPE_WEBHOOK_SECRET as string
    );
  } catch (err: any) {
    console.error("‚ùå Erreur signature Stripe:", err.message);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  console.log("‚úÖ Webhook re√ßu:", event.type);

  try {
    switch (event.type) {
      // ‚úÖ Paiement valid√©
      case "checkout.session.completed": {
        const session = event.data.object as Stripe.Checkout.Session;
        const factureId = session.metadata?.facture_id;

        if (factureId) {
          await supabaseAdmin
            .from("factures")
            .update({
              status: "pay√©",
              stripe_session_id: session.id,
              stripe_payment_intent: session.payment_intent,
            })
            .eq("id", factureId);

          console.log(`‚úÖ Facture ${factureId} marqu√©e comme pay√©e`);
        } else {
          console.error("‚ùå Facture ID manquant dans metadata");
        }
        break;
      }

      // ‚ö†Ô∏è Paiement √©chou√©
      case "payment_intent.payment_failed": {
        const intent = event.data.object as Stripe.PaymentIntent;
        const factureId = intent.metadata?.facture_id;

        if (factureId) {
          await supabaseAdmin
            .from("factures")
            .update({ status: "annul√©e" })
            .eq("id", factureId);

          console.log(`‚ö†Ô∏è Facture ${factureId} marqu√©e comme annul√©e`);
        } else {
          console.error("‚ùå Facture ID manquant dans metadata");
        }
        break;
      }

      // üîé Autres events ignor√©s
      default:
        console.log(`‚ÑπÔ∏è Event ignor√©: ${event.type}`);
    }

    return res.json({ received: true });
  } catch (err) {
    console.error("‚ùå Erreur traitement webhook:", err);
    return res.status(500).send("Erreur serveur webhook");
  }
}
