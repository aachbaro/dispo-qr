// api/stripe/webhook.ts
// -------------------------------------------------------------
// Webhook Stripe - Suivi des paiements
// -------------------------------------------------------------
//
// üìå Description :
//   - V√©rifie la signature Stripe
//   - G√®re les √©v√©nements principaux :
//       ‚Ä¢ checkout.session.completed ‚Üí facture marqu√©e "paid"
//       ‚Ä¢ payment_intent.payment_failed ‚Üí facture marqu√©e "canceled"
//   - Met √† jour la table `factures`
//   - Si une facture est li√©e √† une mission, met aussi √† jour `missions.status`
//
// üìç Endpoint :
//   - POST /api/stripe/webhook
//
// üîí Acc√®s :
//   - Appel uniquement par Stripe (signature requise)
//
// ‚ö†Ô∏è Bonnes pratiques :
//   - Toujours logguer les √©v√©nements re√ßus
//   - Ne pas renvoyer 200 si traitement √©choue
// -------------------------------------------------------------

import type { VercelRequest, VercelResponse } from "@vercel/node";
import Stripe from "stripe";
import { supabaseAdmin } from "../_supabase.js";

// -----------------------------
// Initialisation Stripe
// -----------------------------
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string);

// Stripe a besoin du raw body pour v√©rifier la signature
export const config = {
  api: {
    bodyParser: false,
  },
};

// -----------------------------
// Helpers
// -----------------------------
function rawBody(req: VercelRequest): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    const chunks: Uint8Array[] = [];
    req.on("data", (chunk) => chunks.push(chunk));
    req.on("end", () => resolve(Buffer.concat(chunks)));
    req.on("error", (err) => reject(err));
  });
}

// -----------------------------
// Handler principal
// -----------------------------
export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (req.method !== "POST") {
    return res.status(405).send("M√©thode non autoris√©e");
  }

  const sig = req.headers["stripe-signature"];
  if (!sig) {
    return res.status(400).send("Signature manquante");
  }

  let event: Stripe.Event;
  try {
    const buf = await rawBody(req);
    event = stripe.webhooks.constructEvent(
      buf,
      sig,
      process.env.STRIPE_WEBHOOK_SECRET as string
    );
  } catch (err: any) {
    console.error("‚ùå Erreur signature Stripe:", err.message);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  console.log("‚úÖ Webhook re√ßu:", event.type);

  try {
    switch (event.type) {
      // ‚úÖ Paiement valid√©
      case "checkout.session.completed": {
        const session = event.data.object as Stripe.Checkout.Session;
        const factureId = session.metadata?.facture_id;

        if (!factureId) {
          console.error("‚ùå Facture ID manquant dans metadata");
          break;
        }

        // R√©cup√©ration de la facture li√©e
        const { data: facture, error: factureError } = await supabaseAdmin
          .from("factures")
          .select("id, mission_id")
          .eq("id", factureId)
          .single();

        if (factureError || !facture) {
          console.error("‚ùå Facture introuvable:", factureError);
          break;
        }

        // Mise √† jour facture ‚Üí paid
        const { error: updateError } = await supabaseAdmin
          .from("factures")
          .update({
            status: "paid",
            stripe_session_id: session.id,
            stripe_payment_intent: session.payment_intent,
          })
          .eq("id", factureId);

        if (updateError) {
          console.error("‚ùå Erreur update facture:", updateError);
          break;
        }

        console.log(`‚úÖ Facture ${factureId} marqu√©e comme paid`);

        // üîÑ Si mission li√©e ‚Üí passer mission en "paid"
        if (facture.mission_id) {
          const { error: missionError } = await supabaseAdmin
            .from("missions")
            .update({ status: "paid" })
            .eq("id", facture.mission_id);

          if (missionError) {
            console.error(
              `‚ö†Ô∏è Erreur mise √† jour mission ${facture.mission_id}:`,
              missionError
            );
          } else {
            console.log(`‚úÖ Mission ${facture.mission_id} marqu√©e comme paid`);
          }
        }

        break;
      }

      // ‚ö†Ô∏è Paiement √©chou√©
      case "payment_intent.payment_failed": {
        const intent = event.data.object as Stripe.PaymentIntent;
        const factureId = intent.metadata?.facture_id;

        if (!factureId) {
          console.error("‚ùå Facture ID manquant dans metadata");
          break;
        }

        // Mise √† jour facture ‚Üí canceled
        const { error } = await supabaseAdmin
          .from("factures")
          .update({ status: "canceled" })
          .eq("id", factureId);

        if (error) {
          console.error("‚ùå Erreur update facture canceled:", error);
        } else {
          console.log(`‚ö†Ô∏è Facture ${factureId} marqu√©e comme canceled`);
        }
        break;
      }

      default:
        console.log(`‚ÑπÔ∏è Event ignor√©: ${event.type}`);
    }

    return res.json({ received: true });
  } catch (err) {
    console.error("‚ùå Erreur traitement webhook:", err);
    return res.status(500).send("Erreur serveur webhook");
  }
}
