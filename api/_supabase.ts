// api/_supabase.ts
// -------------------------------------------------------------
// Clients Supabase (admin + public)
// -------------------------------------------------------------
//
// üìå Description :
//   - Initialise deux clients Supabase :
//       1Ô∏è‚É£ supabaseAdmin  ‚Üí avec la cl√© SERVICE_ROLE_KEY (acc√®s total DB)
//       2Ô∏è‚É£ supabasePublic ‚Üí avec la cl√© ANON_KEY (pour v√©rif JWT Auth)
//   - Utilis√©s respectivement :
//       - supabaseAdmin : toutes les op√©rations serveur sur les tables
//       - supabasePublic : v√©rification des tokens via getUserFromToken()
//
// ‚ö†Ô∏è Attention :
//   - Ne jamais exposer la cl√© SERVICE_ROLE c√¥t√© frontend
//   - PersistSession et autoRefreshToken d√©sactiv√©s (mode backend)
// -------------------------------------------------------------

import { createClient } from "@supabase/supabase-js";

// ----------------------
// üîß Variables d'environnement
// ----------------------
const url = process.env.SUPABASE_URL ?? "";
const serviceRole = process.env.SUPABASE_SERVICE_ROLE_KEY ?? "";
const anonKey = process.env.SUPABASE_ANON_KEY ?? "";

if (!url) throw new Error("‚ùå [supabase] SUPABASE_URL manquant");
if (!serviceRole)
  throw new Error("‚ùå [supabase] SUPABASE_SERVICE_ROLE_KEY manquant");
if (!anonKey)
  console.warn(
    "‚ö†Ô∏è [supabase] SUPABASE_ANON_KEY manquant ‚Äî v√©rif JWT impossible"
  );

// ----------------------
// üß† Client admin ‚Üí acc√®s total (serveur uniquement)
// ----------------------
export const supabaseAdmin = createClient(url, serviceRole, {
  auth: {
    persistSession: false,
    autoRefreshToken: false,
  },
});

// ----------------------
// üë§ Client public ‚Üí v√©rification des tokens JWT
// ----------------------
export const supabasePublic = createClient(url, anonKey, {
  auth: {
    persistSession: false,
    autoRefreshToken: false,
  },
});
