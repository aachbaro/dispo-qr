// src/services/missions.ts
// -------------------------------------------------------------
// Services li√©s aux missions (entreprise & client)
// -------------------------------------------------------------
//
// üìå Description :
//   - Liste les missions de l'utilisateur connect√© (entreprise/client)
//   - Cr√©√© de nouvelles missions pour l'entreprise propri√©taire
//   - Mise √† jour / suppression via l'endpoint unifi√© /api/missions/[id]
//
// üìç Endpoints API :
//   - GET    /api/missions             ‚Üí missions de l'utilisateur
//   - POST   /api/missions             ‚Üí cr√©er une mission (+ slots)
//   - GET    /api/missions/[id]        ‚Üí r√©cup√©rer une mission
//   - PUT    /api/missions/[id]        ‚Üí mettre √† jour une mission
//   - DELETE /api/missions/[id]        ‚Üí supprimer une mission
//
// üîí R√®gles d‚Äôacc√®s :
//   - Clients : lecture seule (missions o√π client_id = user.id)
//   - Entreprises/Admin : acc√®s missions entreprise + cr√©ation
//
// ‚ö†Ô∏è Remarques :
//   - Les slots sont envoy√©s dans `slots` (table d√©di√©e)
//   - Typage bas√© sur types/database.ts g√©n√©r√© via Supabase
// -------------------------------------------------------------

import { request } from "./api";
import type { Tables, TablesInsert, TablesUpdate } from "../types/database";
import type { Slot } from "./slots";

// ----------------------
// Types
// ----------------------

export type Mission = Tables<"missions">;
export type MissionInsert = TablesInsert<"missions">;
export type MissionUpdate = TablesUpdate<"missions">;

export type MissionWithRelations = Mission & {
  slots?: Slot[];
  entreprise?: Tables<"entreprise"> | null;
  client?: Tables<"clients"> | null;
};

// Payload enrichi c√¥t√© frontend : ajoute les slots li√©s
export type MissionPayload = MissionInsert & {
  slots: Array<Pick<Slot, "start" | "end" | "title">>;
  entreprise_ref?: string; // ‚ö° permet de passer le slug d'entreprise
};

// ----------------------
// Services Missions
// ----------------------

/**
 * ‚ûï Cr√©er une mission (owner uniquement)
 */
export async function createMission(
  payload: MissionPayload
): Promise<{ mission: MissionWithRelations }> {
  return request<{ mission: MissionWithRelations }>("/api/missions", {
    method: "POST",
    body: JSON.stringify(payload),
  });
}

/**
 * üìú Lister les missions d‚Äôune entreprise
 */
export async function listMissions(
  params: { status?: Mission["status"] } = {}
): Promise<{ missions: MissionWithRelations[] }> {
  const searchParams = new URLSearchParams();
  if (params.status) searchParams.set("status", params.status);

  const query = searchParams.toString();

  return request<{ missions: MissionWithRelations[] }>(
    `/api/missions${query ? `?${query}` : ""}`,
    {
      skipAuth: false,
    }
  );
}

/**
 * ‚úèÔ∏è Mettre √† jour une mission (owner uniquement)
 */
export async function updateMission(
  missionId: number,
  updates: MissionUpdate
): Promise<{ mission: MissionWithRelations }> {
  return request<{ mission: MissionWithRelations }>(
    `/api/missions/${missionId}`,
    {
      method: "PUT",
      body: JSON.stringify(updates),
    }
  );
}

/**
 * ‚ùå Supprimer une mission (owner uniquement)
 */
export async function deleteMission(
  _entrepriseId: number,
  missionId: number
): Promise<void> {
  await request(`/api/missions/${missionId}`, {
    method: "DELETE",
  });
}
